@model List<RecipeBookMVC.Models.LikedRecipe>

@{
    ViewBag.Title = "Your Liked Recipes";
    // Get the current filter from the controller to highlight the active button
    string currentDiet = ViewBag.CurrentDiet as string ?? "all";
}

<div class="container py-5">
    <h2 class="text-center mb-4">Your Saved Recipes</h2>

    @if (ViewBag.ErrorMessage != null)
    {
        <div class="alert alert-danger text-center" role="alert">
            @ViewBag.ErrorMessage
        </div>
    }

    <!-- Diet Filter Buttons -->
    <div class="d-flex justify-content-center mb-4">
        <a href="@Url.Action("Liked", new { diet = "all" })"
           class="btn @(currentDiet == "all" ? "btn-primary" : "btn-outline-primary") mx-2">
            All Recipes
        </a>
        <a href="@Url.Action("Liked", new { diet = "vegetarian" })"
           class="btn @(currentDiet == "vegetarian" ? "btn-success" : "btn-outline-success") mx-2">
            Vegetarian
        </a>
        <a href="@Url.Action("Liked", new { diet = "non-vegetarian" })"
           class="btn @(currentDiet == "non-vegetarian" ? "btn-danger" : "btn-outline-danger") mx-2">
            Non-Vegetarian
        </a>
    </div>

    @if (Model == null || !Model.Any())
    {
        <div class="alert alert-info text-center" role="alert">
            You haven't liked any recipes yet. Go back to the <a href="@Url.Action("Index", "Home")">Home page</a> to find some!
        </div>
    }
    else
    {
        <p class="text-center text-muted">Showing @Model.Count() saved recipes.</p>

        <div class="row" id="likedRecipesGrid">
            @Html.AntiForgeryToken() @* CRITICAL: Token for AJAX POST requests below *@

            @foreach (var likedRecipe in Model)
            {
                <div class="col-md-4 mb-4" id="recipeCard_@likedRecipe.Id">
                    <div class="card shadow-sm h-100">
                        <!-- Recipe Image -->
                        <img src="@likedRecipe.RecipeImageUri" class="card-img-top liked-recipe-image" alt="@likedRecipe.RecipeTitle"
                             onerror="this.onerror=null;this.src='https://placehold.co/400x250/ccc/white?text=No+Image'" />

                        <div class="card-body d-flex flex-column">
                            <!-- Recipe Title -->
                            <h5 class="card-title recipe-title">@likedRecipe.RecipeTitle</h5>

                            <!-- Diet Badge -->
                            @if (likedRecipe.IsVegetarian)
                            {
                                <span class="badge badge-success mb-2">Vegetarian</span>
                            }
                            else
                            {
                                <span class="badge badge-danger mb-2">Non-Vegetarian</span>
                            }

                            <!-- Action Buttons -->
                            <div class="mt-auto">
                                <!-- Link to actual Spoonacular Recipe Page -->
                                <a href="@Url.Action("RecipePage", new { id = likedRecipe.RecipeId })" class="btn btn-sm btn-info" role="button">View Details</a>

                                <!-- FUNCTIONAL REMOVE BUTTON -->
                                <button type="button" class="btn btn-sm btn-outline-danger ml-2 remove-btn"
                                        onclick="removeRecipe(@likedRecipe.Id, this)">
                                    Remove 🗑️
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Basic custom style for recipe images -->
<style>
    .liked-recipe-image {
        width: 100%;
        height: 250px; /* Fixed height for consistency */
        object-fit: cover; /* Ensures image covers the area without distortion */
    }

    .card-title {
        min-height: 3em; /* Ensure title section takes up enough space */
    }
</style>

@section scripts {
    <script type="text/javascript">
        function removeRecipe(likedRecipeId, buttonElement) {
            // Disable button during AJAX call
            $(buttonElement).prop('disabled', true).text('Removing...');

            const antiForgeryToken = $('input[name="__RequestVerificationToken"]').val();

            // AJAX POST call to the new RemoveLikedRecipe action (which you'll need to add)
            $.post('@Url.Action("RemoveLikedRecipe", "Home")', {
                id: likedRecipeId, // Pass the primary key of the LikedRecipe table entry
                __RequestVerificationToken: antiForgeryToken
            })
            .done(function(response) {
                // NOTE: Replace alert with a custom UI message box in production
                alert(response.message);

                if (response.success) {
                    // Visually remove the card from the DOM without reloading the page
                    $('#recipeCard_' + likedRecipeId).fadeOut(400, function() {
                        $(this).remove();
                        // Optional: Check if the grid is now empty and display a message
                        if ($('#likedRecipesGrid .col-md-4').length === 0) {
                            // Since we don't have the full empty state HTML here, reloading is simplest for full UI update
                            window.location.reload();
                        }
                    });
                } else {
                    // Re-enable button on failure
                    $(buttonElement).prop('disabled', false).text('Remove 🗑️');
                }
            })
            .fail(function() {
                alert("Failed to connect to the server or invalid request.");
                // Re-enable button on complete failure
                $(buttonElement).prop('disabled', false).text('Remove 🗑️');
            });
        }
    </script>
}
